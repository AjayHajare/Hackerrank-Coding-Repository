Given a n-ary tree, find its maximum depth.
The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).

 

Example 1:
IMAGE :   https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png
Input: root = [1,null,3,2,4,null,5,6]
Output: 3

Example 2:
IMAGE :  https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: 5
 

Constraints:
The depth of the n-ary tree is less than or equal to 1000.
The total number of nodes is between [0, 104].

*************************************************************************************************************************************************************************

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/


//Recurssive Approach :--------------------------------------

class Solution {
    public int maxDepth(Node root) {
        if(root==null)
            return 0;
        
        int max = 0;
        
        for(Node x: root.children)                                    // 'children' is the list of child nodes of current 'Node'             
            max = Math.max(maxDepth(x), max);
        
        return 1 + max;                                               //Here '1' is added to keep track of the 'Node', which is traverse before moving to next 'Node'
    }
}

************************************************************************************************************************************************************************

//Iterative Approach using BFS approach :--------------------------------------------------
//iterate the tree level by level, the last level we get to is the result (max depth).

class Solution {
    public int maxDepth(Node root) {
        if(root==null)
            return 0;
        
        int depth = 0;
        Queue<Node> q = new LinkedList<Node>();
        q.offer(root);
        
        while(!q.isEmpty()){
            depth++;                                                      // all nodes currently in the queue are on exactly this depth
            
            int size = q.size();                                          // remove all nodes in current level from the queue, and add all their children (all nodes of the 
                                                                          // next level) to end of the queue
            for(int i=0; i<size; i++){
                Node current = q.poll();
                
                for(Node x: current.children)                            // 'children' is the list of child nodes of current 'Node'
                    q.offer(x);
                
            }
        }
        
        return depth;
    }
}
