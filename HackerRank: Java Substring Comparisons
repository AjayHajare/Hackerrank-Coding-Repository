Given a string, , and an integer, , complete the function so that it finds the lexicographically smallest and largest substrings of length .

Function Description:
Complete the getSmallestAndLargest function in the editor below.
getSmallestAndLargest has the following parameters:
string s: a string
int k: the length of the substrings to find

Returns
string: the string ' + "\n" + ' where and are the two substrings

Input Format
The first line contains a string denoting .
The second line contains an integer denoting .

Constraints
consists of English alphabetic letters only (i.e., [a-zA-Z]).

Sample Input :
welcometojava
3

Sample Output :
ava
wel

Explanation :
String  has the following lexicographically-ordered substrings of length : [ ava, com, elc, eto, jav, lco, met, oja, ome, toj, wel ]
We then return the first (lexicographically smallest) substring and the last (lexicographically largest) substring as two newline-separated values (i.e., ava\nwel).
The stub code in the editor then prints 'ava' as our first line of output and 'wel' as our second line of output.

******************************************************************************************************************

    
import java.util.Scanner;

public class Solution {
    public static String getSmallestAndLargest(String s, int k) {
       String smallest = s.substring(0,k);
       String largest = s.substring(0,k);
        
         for(int i=0; i<=(s.length()-k); i++){
            String sub = s.substring(i, i+k);
            if(sub.compareTo(largest)>0)
                largest = sub;
            if(sub.compareTo(smallest)<0)
                smallest = sub;
        }
        
        return smallest + "\n" + largest;
    }
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.next();
        int k = scan.nextInt();
        scan.close();
      
        System.out.println(getSmallestAndLargest(s, k));
    }
}




