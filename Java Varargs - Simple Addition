Variable Argument (Varargs):
The varrags allows the method to accept zero or muliple arguments. Before varargs either we use overloaded method or take an array as the method parameter 
but it was not considered good because it leads to the maintenance problem. If we don't know how many argument we will have to pass in the method, 
varargs is the better approach.

Advantage of Varargs:
We don't have to provide overloaded methods so less code.

Rules for varargs as follows:
1) There can be only one variable argument in the method.
2) Variable argument (varargs) must be the last argument.

********************************************************************************************************************************************************

You are given a class Solution and its main method in the editor.
Your task is to create the class Add and the required methods so that the code prints the sum of the numbers passed to the function add.
Note: Your add method in the Add class must print the sum as given in the Sample Output

Input Format:
There are six lines of input, each containing an integer.

Output Format:
There will be only four lines of output. Each line contains the sum of the integers passed as the parameters to add in the main method.

Sample Input:
1
2
3
4
5
6

Sample Output:
1+2=3
1+2+3=6
1+2+3+4+5=15
1+2+3+4+5+6=21

******************************************************************************************************************************************************
import java.io.*;
import java.lang.reflect.*;
import java.util.*;

class Add{
    public void add(int... nums){
        int sum = 0, count = 0;
        for(int x : nums){
            sum = x + sum;
            count++;
            if(count < nums.length)
               System.out.print( x +"+");
            else
                System.out.print( x );
        }
        System.out.println("="+ sum);
    }
}

public class Solution {
    public static void main(String[] args) {
			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
			int n1=Integer.parseInt(br.readLine());
			int n2=Integer.parseInt(br.readLine());
			int n3=Integer.parseInt(br.readLine());
			int n4=Integer.parseInt(br.readLine());
			int n5=Integer.parseInt(br.readLine());
			int n6=Integer.parseInt(br.readLine());
			Add ob=new Add();
			ob.add(n1,n2);
			ob.add(n1,n2,n3);
			ob.add(n1,n2,n3,n4,n5);	
			ob.add(n1,n2,n3,n4,n5,n6);
	}	
}

